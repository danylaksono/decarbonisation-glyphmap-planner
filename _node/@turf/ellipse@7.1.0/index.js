import{isObject as j,isNumber as d,degreesToRadians as y,polygon as l}from"../helpers@7.1.0/index.js";import{rhumbDestination as b}from"../rhumb-destination@7.1.0/index.js";import{transformRotate as A}from"../transform-rotate@7.1.0/index.js";import{getCoord as c}from"../invariant@7.1.0/index.js";function g(o,t,s,e){e=e||{};const w=e.steps||64,a=e.units||"kilometers",f=e.angle||0,q=e.pivot||o,M=e.properties||{};if(!o)throw new Error("center is required");if(!t)throw new Error("xSemiAxis is required");if(!s)throw new Error("ySemiAxis is required");if(!j(e))throw new Error("options must be an object");if(!d(w))throw new Error("steps must be a number");if(!d(f))throw new Error("angle must be a number");const u=c(o);if(a!=="degrees"){const p=b(o,t,90,{units:a}),r=b(o,s,0,{units:a});t=c(p)[0]-u[0],s=c(r)[1]-u[1]}const h=[];for(let p=0;p<w;p+=1){const r=p*-360/w;let i=t*s/Math.sqrt(Math.pow(s,2)+Math.pow(t,2)*Math.pow(E(r),2)),n=t*s/Math.sqrt(Math.pow(t,2)+Math.pow(s,2)/Math.pow(E(r),2));if(r<-90&&r>=-270&&(i=-i),r<-180&&r>=-360&&(n=-n),a==="degrees"){const m=y(f),v=i*Math.cos(m)+n*Math.sin(m),x=n*Math.cos(m)-i*Math.sin(m);i=v,n=x}h.push([i+u[0],n+u[1]])}return h.push(h[0]),a==="degrees"?l([h],M):A(l([h],M),f,{pivot:q})}function E(o){const t=o*Math.PI/180;return Math.tan(t)}var D=g;export{D as default,g as ellipse};
