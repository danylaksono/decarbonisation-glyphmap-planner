import{lineIntersect as c}from"../line-intersect@7.1.0/index.js";import{polygonToLine as m}from"../polygon-to-line@7.1.0/index.js";import{booleanPointInPolygon as v}from"../boolean-point-in-polygon@7.1.0/index.js";import{getGeom as u}from"../invariant@7.1.0/index.js";import{point as w}from"../helpers@7.1.0/index.js";function f(r,e){var t=u(r),n=u(e),a=t.type,o=n.type;switch(a){case"MultiPoint":switch(o){case"LineString":return l(t,n);case"Polygon":return g(t,n);default:throw new Error("feature2 "+o+" geometry not supported")}case"LineString":switch(o){case"MultiPoint":return l(n,t);case"LineString":return y(t,n);case"Polygon":return d(t,n);default:throw new Error("feature2 "+o+" geometry not supported")}case"Polygon":switch(o){case"MultiPoint":return g(n,t);case"LineString":return d(n,t);default:throw new Error("feature2 "+o+" geometry not supported")}default:throw new Error("feature1 "+a+" geometry not supported")}}function l(r,e){for(var t=!1,n=!1,a=r.coordinates.length,o=0;o<a&&!t&&!n;){for(var i=0;i<e.coordinates.length-1;i++){var s=!0;(i===0||i===e.coordinates.length-2)&&(s=!1),h(e.coordinates[i],e.coordinates[i+1],r.coordinates[o],s)?t=!0:n=!0}o++}return t&&n}function y(r,e){var t=c(r,e);if(t.features.length>0)for(var n=0;n<r.coordinates.length-1;n++)for(var a=0;a<e.coordinates.length-1;a++){var o=!0;if((a===0||a===e.coordinates.length-2)&&(o=!1),h(r.coordinates[n],r.coordinates[n+1],e.coordinates[a],o))return!0}return!1}function d(r,e){const t=m(e);return c(r,t).features.length>0}function g(r,e){var t=!1,n=!1,a=r.coordinates.length;for(let o=0;o<a&&(!t||!n);o++)v(w(r.coordinates[o]),e)?t=!0:n=!0;return n&&t}function h(r,e,t,n){var a=t[0]-r[0],o=t[1]-r[1],i=e[0]-r[0],s=e[1]-r[1],p=a*s-o*i;return p!==0?!1:n?Math.abs(i)>=Math.abs(s)?i>0?r[0]<=t[0]&&t[0]<=e[0]:e[0]<=t[0]&&t[0]<=r[0]:s>0?r[1]<=t[1]&&t[1]<=e[1]:e[1]<=t[1]&&t[1]<=r[1]:Math.abs(i)>=Math.abs(s)?i>0?r[0]<t[0]&&t[0]<e[0]:e[0]<t[0]&&t[0]<r[0]:s>0?r[1]<t[1]&&t[1]<e[1]:e[1]<t[1]&&t[1]<r[1]}var M=f;export{f as booleanCrosses,M as default};
