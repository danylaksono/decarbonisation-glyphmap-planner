import{explode as M}from"../explode@7.1.0/index.js";import{center as q}from"../center@7.1.0/index.js";import{nearestPoint as F}from"../nearest-point@7.1.0/index.js";import{booleanPointInPolygon as x}from"../boolean-point-in-polygon@7.1.0/index.js";import{featureCollection as p,point as C,feature as L}from"../helpers@7.1.0/index.js";function h(r){const s=S(r),t=q(s);let n=!1,c=0;for(;!n&&c<s.features.length;){const e=s.features[c].geometry;let a,f,l,g,m,y,d=!1;if(e.type==="Point")t.geometry.coordinates[0]===e.coordinates[0]&&t.geometry.coordinates[1]===e.coordinates[1]&&(n=!0);else if(e.type==="MultiPoint"){let o=!1,i=0;for(;!o&&i<e.coordinates.length;)t.geometry.coordinates[0]===e.coordinates[i][0]&&t.geometry.coordinates[1]===e.coordinates[i][1]&&(n=!0,o=!0),i++}else if(e.type==="LineString"){let o=0;for(;!d&&o<e.coordinates.length-1;)a=t.geometry.coordinates[0],f=t.geometry.coordinates[1],l=e.coordinates[o][0],g=e.coordinates[o][1],m=e.coordinates[o+1][0],y=e.coordinates[o+1][1],P(a,f,l,g,m,y)&&(d=!0,n=!0),o++}else if(e.type==="MultiLineString"){let o=0;for(;o<e.coordinates.length;){d=!1;let i=0;const u=e.coordinates[o];for(;!d&&i<u.length-1;)a=t.geometry.coordinates[0],f=t.geometry.coordinates[1],l=u[i][0],g=u[i][1],m=u[i+1][0],y=u[i+1][1],P(a,f,l,g,m,y)&&(d=!0,n=!0),i++;o++}}else(e.type==="Polygon"||e.type==="MultiPolygon")&&x(t,e)&&(n=!0);c++}if(n)return t;{const e=p([]);for(let a=0;a<s.features.length;a++)e.features=e.features.concat(M(s.features[a]).features);return C(F(t,e).geometry.coordinates)}}function S(r){return r.type!=="FeatureCollection"?r.type!=="Feature"?p([L(r)]):p([r]):r}function P(r,s,t,n,c,e){const a=Math.sqrt((c-t)*(c-t)+(e-n)*(e-n)),f=Math.sqrt((r-t)*(r-t)+(s-n)*(s-n)),l=Math.sqrt((c-r)*(c-r)+(e-s)*(e-s));return a===f+l}var b=h;export{b as default,h as pointOnFeature};
