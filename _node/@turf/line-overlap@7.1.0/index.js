import{geojsonRbush as C}from"../geojson-rbush@7.1.0/index.js";import{lineSegment as j}from"../line-segment@7.1.0/index.js";import{nearestPointOnLine as u}from"../nearest-point-on-line@7.1.0/index.js";import{booleanPointOnLine as d}from"../boolean-point-on-line@7.1.0/index.js";import{getCoords as v}from"../invariant@7.1.0/index.js";import{segmentEach as w,featureEach as x}from"../meta@7.1.0/index.js";import{isObject as L,featureCollection as P}from"../helpers@7.1.0/index.js";import m from"../../fast-deep-equal@3.1.3/index.js";function b(f,g,r={}){if(r=r||{},!L(r))throw new Error("options is invalid");var t=r.tolerance||0,n=[],p=C();const s=j(f);p.load(s);var e;let c=[];return w(g,function(o){var h=!1;o&&(x(p.search(o),function(i){if(h===!1){var l=v(o).sort(),a=v(i).sort();if(m(l,a))h=!0,e?e=E(e,o)||e:e=o;else if(t===0?d(l[0],i)&&d(l[1],i):u(i,l[0]).properties.dist<=t&&u(i,l[1]).properties.dist<=t)h=!0,e?e=E(e,o)||e:e=o;else if(t===0?d(a[0],o)&&d(a[1],o):u(o,a[0]).properties.dist<=t&&u(o,a[1]).properties.dist<=t)if(e){const O=E(e,i);O?e=O:c.push(i)}else e=i}}),h===!1&&e&&(n.push(e),c.length&&(n=n.concat(c),c=[]),e=void 0))}),e&&n.push(e),P(n)}function E(f,g){var r=v(g),t=v(f),n=t[0],p=t[t.length-1],s=f.geometry.coordinates;if(m(r[0],n))s.unshift(r[1]);else if(m(r[0],p))s.push(r[1]);else if(m(r[1],n))s.unshift(r[0]);else if(m(r[1],p))s.push(r[0]);else return;return f}var y=b;export{y as default,b as lineOverlap};
