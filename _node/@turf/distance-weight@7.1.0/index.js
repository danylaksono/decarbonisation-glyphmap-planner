import{centroid as w}from"../centroid@7.1.0/index.js";import{getCoord as p}from"../invariant@7.1.0/index.js";import{featureEach as b}from"../meta@7.1.0/index.js";function g(f,l,h=2){const a=p(f),s=p(l),c=a[0]-s[0],i=a[1]-s[1];return h===1?Math.abs(c)+Math.abs(i):Math.pow(Math.pow(c,h)+Math.pow(i,h),1/h)}function u(f,l){var h,a;l=l||{};const s=l.threshold||1e4,c=l.p||2,i=(h=l.binary)!=null?h:!1,d=l.alpha||-1,m=(a=l.standardization)!=null?a:!1,n=[];b(f,t=>{n.push(w(t))});const r=[];for(let t=0;t<n.length;t++)r[t]=[];for(let t=0;t<n.length;t++)for(let o=t;o<n.length;o++){t===o&&(r[t][o]=0);const e=g(n[t],n[o],c);r[t][o]=e,r[o][t]=e}for(let t=0;t<n.length;t++)for(let o=0;o<n.length;o++){const e=r[t][o];e!==0&&(i?e<=s?r[t][o]=1:r[t][o]=0:e<=s?r[t][o]=Math.pow(e,d):r[t][o]=0)}if(m)for(let t=0;t<n.length;t++){const o=r[t].reduce((e,M)=>e+M,0);for(let e=0;e<n.length;e++)r[t][e]=r[t][e]/o}return r}var v=u;export{v as default,u as distanceWeight,g as pNormDistance};
