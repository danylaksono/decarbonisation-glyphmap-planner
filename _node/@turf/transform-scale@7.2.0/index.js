import{clone as p}from"../clone@7.2.0/index.js";import{center as b}from"../center@7.2.0/index.js";import{centroid as l}from"../centroid@7.2.0/index.js";import{bbox as d}from"../bbox@7.2.0/index.js";import{rhumbBearing as w}from"../rhumb-bearing@7.2.0/index.js";import{rhumbDistance as g}from"../rhumb-distance@7.2.0/index.js";import{rhumbDestination as y}from"../rhumb-destination@7.2.0/index.js";import{featureEach as E,coordEach as v}from"../meta@7.2.0/index.js";import{isObject as x,point as a}from"../helpers@7.2.0/index.js";import{getType as j,getCoords as A,getCoord as C}from"../invariant@7.2.0/index.js";function f(o,e,r){if(r=r||{},!x(r))throw new Error("options is invalid");const n=r.origin||"centroid",s=r.mutate||!1;if(!o)throw new Error("geojson required");if(typeof e!="number"||e<=0)throw new Error("invalid factor");const t=Array.isArray(n)||typeof n=="object";return s!==!0&&(o=p(o)),o.type==="FeatureCollection"&&!t?(E(o,function(i,c){o.features[c]=m(i,e,n)}),o):m(o,e,n)}function m(o,e,r){const n=j(o)==="Point",s=D(o,r);return e===1||n||(v(o,function(t){const i=g(s,t),c=w(s,t),h=i*e,u=A(y(s,h,c));t[0]=u[0],t[1]=u[1],t.length===3&&(t[2]*=e)}),delete o.bbox),o}function D(o,e){if(e==null&&(e="centroid"),Array.isArray(e)||typeof e=="object")return C(e);const r=o.bbox?o.bbox:d(o,{recompute:!0}),n=r[0],s=r[1],t=r[2],i=r[3];switch(e){case"sw":case"southwest":case"westsouth":case"bottomleft":return a([n,s]);case"se":case"southeast":case"eastsouth":case"bottomright":return a([t,s]);case"nw":case"northwest":case"westnorth":case"topleft":return a([n,i]);case"ne":case"northeast":case"eastnorth":case"topright":return a([t,i]);case"center":return b(o);case void 0:case null:case"centroid":return l(o);default:throw new Error("invalid origin")}}var P=f;export{P as default,f as transformScale};
