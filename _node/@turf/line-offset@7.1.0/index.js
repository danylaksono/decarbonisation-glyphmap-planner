import{flattenEach as w}from"../meta@7.1.0/index.js";import{getType as d,getCoords as v}from"../invariant@7.1.0/index.js";import{isObject as E,multiLineString as L,lengthToDegrees as S,lineString as q}from"../helpers@7.1.0/index.js";function h(e){var n=e[0],r=e[1];return[r[0]-n[0],r[1]-n[1]]}function g(e,n){return e[0]*n[1]-n[0]*e[1]}function y(e,n){return[e[0]+n[0],e[1]+n[1]]}function M(e,n){return[e[0]-n[0],e[1]-n[1]]}function N(e,n){return[e*n[0],e*n[1]]}function O(e,n){var r=e[0],i=h(e),s=n[0],o=h(n),t=g(i,o),f=M(s,r),a=g(f,o),u=a/t,c=y(r,N(u,i));return c}function T(e,n){var r=h(e),i=h(n);return g(r,i)===0}function j(e,n){return T(e,n)?!1:O(e,n)}function l(e,n,r){if(r=r||{},!E(r))throw new Error("options is invalid");var i=r.units;if(!e)throw new Error("geojson is required");if(n==null||isNaN(n))throw new Error("distance is required");var s=d(e),o=e.properties;switch(s){case"LineString":return m(e,n,i);case"MultiLineString":var t=[];return w(e,function(f){t.push(m(f,n,i).geometry.coordinates)}),L(t,o);default:throw new Error("geometry "+s+" is not supported")}}function m(e,n,r){var i=[],s=S(n,r),o=v(e),t=[];return o.forEach(function(f,a){if(a!==o.length-1){var u=D(f,o[a+1],s);if(i.push(u),a>0){var c=i[a-1],p=j(u,c);p!==!1&&(c[1]=p,u[0]=p),t.push(c[0]),a===o.length-2&&(t.push(u[0]),t.push(u[1]))}o.length===2&&(t.push(u[0]),t.push(u[1]))}}),q(t,e.properties)}function D(e,n,r){var i=Math.sqrt((e[0]-n[0])*(e[0]-n[0])+(e[1]-n[1])*(e[1]-n[1])),s=e[0]+r*(n[1]-e[1])/i,o=n[0]+r*(n[1]-e[1])/i,t=e[1]+r*(e[0]-n[0])/i,f=n[1]+r*(e[0]-n[0])/i;return[[s,t],[o,f]]}var b=l;export{b as default,l as lineOffset};
