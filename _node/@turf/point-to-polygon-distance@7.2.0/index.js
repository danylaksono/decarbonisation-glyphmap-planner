import{booleanPointInPolygon as h}from"../boolean-point-in-polygon@7.2.0/index.js";import{pointToLineDistance as y}from"../point-to-line-distance@7.2.0/index.js";import{polygonToLine as M}from"../polygon-to-line@7.2.0/index.js";import{getGeom as b}from"../invariant@7.2.0/index.js";import{flattenEach as w}from"../meta@7.2.0/index.js";import{polygon as f}from"../helpers@7.2.0/index.js";function i(t,e,p={}){var u,c;const a=(u=p.method)!=null?u:"geodesic",m=(c=p.units)!=null?c:"kilometers";if(!t)throw new Error("point is required");if(!e)throw new Error("polygon or multi-polygon is required");const n=b(e);if(n.type==="MultiPolygon"){const o=n.coordinates.map(s=>i(t,f(s),{method:a,units:m}));return Math.min(...o.map(Math.abs))*(h(t,e)?-1:1)}if(n.coordinates.length>1){const[o,...s]=n.coordinates.map(g=>i(t,f([g]),{method:a,units:m}));if(o>=0)return o;const l=Math.min(...s);return l<0?Math.abs(l):Math.min(l,Math.abs(o))}const d=M(n);let r=1/0;return w(d,o=>{r=Math.min(r,y(t,o,{method:a,units:m}))}),h(t,n)?-r:r}var P=i;export{P as default,i as pointToPolygonDistance};
