import{bbox as a}from"../bbox@7.1.0/index.js";import{booleanPointInPolygon as c}from"../boolean-point-in-polygon@7.1.0/index.js";import{booleanPointOnLine as u}from"../boolean-point-on-line@7.1.0/index.js";import{getGeom as l}from"../invariant@7.1.0/index.js";function y(e,r){const n=l(e),o=l(r),i=n.type,t=o.type,s=n.coordinates,b=o.coordinates;switch(i){case"Point":switch(t){case"Point":return f(s,b);default:throw new Error("feature2 "+t+" geometry not supported")}case"MultiPoint":switch(t){case"Point":return p(n,o);case"MultiPoint":return m(n,o);default:throw new Error("feature2 "+t+" geometry not supported")}case"LineString":switch(t){case"Point":return u(o,n,{ignoreEndVertices:!0});case"LineString":return M(n,o);case"MultiPoint":return w(n,o);default:throw new Error("feature2 "+t+" geometry not supported")}case"Polygon":switch(t){case"Point":return c(o,n,{ignoreBoundary:!0});case"LineString":return E(n,o);case"Polygon":return d(n,o);case"MultiPoint":return h(n,o);default:throw new Error("feature2 "+t+" geometry not supported")}case"MultiPolygon":switch(t){case"Polygon":return g(n,o);default:throw new Error("feature2 "+t+" geometry not supported")}default:throw new Error("feature1 "+i+" geometry not supported")}}function g(e,r){return e.coordinates.some(n=>d({type:"Polygon",coordinates:n},r))}function p(e,r){let n,o=!1;for(n=0;n<e.coordinates.length;n++)if(f(e.coordinates[n],r.coordinates)){o=!0;break}return o}function m(e,r){for(const n of r.coordinates){let o=!1;for(const i of e.coordinates)if(f(n,i)){o=!0;break}if(!o)return!1}return!0}function w(e,r){let n=!1;for(const o of r.coordinates)if(u(o,e,{ignoreEndVertices:!0})&&(n=!0),!u(o,e))return!1;return!!n}function h(e,r){for(const n of r.coordinates)if(!c(n,e,{ignoreBoundary:!0}))return!1;return!0}function M(e,r){let n=!1;for(const o of r.coordinates)if(u({type:"Point",coordinates:o},e,{ignoreEndVertices:!0})&&(n=!0),!u({type:"Point",coordinates:o},e,{ignoreEndVertices:!1}))return!1;return n}function E(e,r){let n=!1,o=0;const i=a(e),t=a(r);if(!P(i,t))return!1;for(o;o<r.coordinates.length-1;o++){const s=L(r.coordinates[o],r.coordinates[o+1]);if(c({type:"Point",coordinates:s},e,{ignoreBoundary:!0})){n=!0;break}}return n}function d(e,r){if(e.type==="Feature"&&e.geometry===null||r.type==="Feature"&&r.geometry===null)return!1;const n=a(e),o=a(r);if(!P(n,o))return!1;const i=l(r).coordinates;for(const t of i)for(const s of t)if(!c(s,e))return!1;return!0}function P(e,r){return!(e[0]>r[0]||e[2]<r[2]||e[1]>r[1]||e[3]<r[3])}function f(e,r){return e[0]===r[0]&&e[1]===r[1]}function L(e,r){return[(e[0]+r[0])/2,(e[1]+r[1])/2]}var I=y;export{y as booleanContains,f as compareCoords,I as default,P as doBBoxOverlap,L as getMidpoint,E as isLineInPoly,M as isLineOnLine,m as isMultiPointInMultiPoint,h as isMultiPointInPoly,w as isMultiPointOnLine,p as isPointInMultiPoint,d as isPolyInPoly,g as isPolygonInMultiPolygon};
