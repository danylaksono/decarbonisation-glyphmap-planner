function s(e){if(!e)throw new Error("geojson is required");switch(e.type){case"Feature":return a(e);case"FeatureCollection":return l(e);case"Point":case"LineString":case"Polygon":case"MultiPoint":case"MultiLineString":case"MultiPolygon":case"GeometryCollection":return c(e);default:throw new Error("unknown GeoJSON type")}}function a(e){const t={type:"Feature"};return Object.keys(e).forEach(o=>{switch(o){case"type":case"properties":case"geometry":return;default:t[o]=e[o]}}),t.properties=n(e.properties),e.geometry==null?t.geometry=null:t.geometry=c(e.geometry),t}function n(e){const t={};return e&&Object.keys(e).forEach(o=>{const r=e[o];typeof r=="object"?r===null?t[o]=null:Array.isArray(r)?t[o]=r.map(i=>i):t[o]=n(r):t[o]=r}),t}function l(e){const t={type:"FeatureCollection"};return Object.keys(e).forEach(o=>{switch(o){case"type":case"features":return;default:t[o]=e[o]}}),t.features=e.features.map(o=>a(o)),t}function c(e){const t={type:e.type};return e.bbox&&(t.bbox=e.bbox),e.type==="GeometryCollection"?(t.geometries=e.geometries.map(o=>c(o)),t):(t.coordinates=u(e.coordinates),t)}function u(e){const t=e;return typeof t[0]!="object"?t.slice():t.map(o=>u(o))}var y=s;export{s as clone,n as cloneProperties,y as default};
