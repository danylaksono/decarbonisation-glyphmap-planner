import{booleanPointInPolygon as i}from"../boolean-point-in-polygon@7.2.0/index.js";import{lineIntersect as a}from"../line-intersect@7.2.0/index.js";import{flattenEach as u}from"../meta@7.2.0/index.js";import{polygonToLine as f}from"../polygon-to-line@7.2.0/index.js";function l(e,o,{ignoreSelfIntersections:t=!0}={ignoreSelfIntersections:!0}){let n=!0;return u(e,s=>{u(o,r=>{if(n===!1)return!1;n=h(s.geometry,r.geometry,t)})}),n}function h(e,o,t){switch(e.type){case"Point":switch(o.type){case"Point":return!p(e.coordinates,o.coordinates);case"LineString":return!g(o,e);case"Polygon":return!i(e,o)}break;case"LineString":switch(o.type){case"Point":return!g(e,o);case"LineString":return!d(e,o,t);case"Polygon":return!y(o,e,t)}break;case"Polygon":switch(o.type){case"Point":return!i(o,e);case"LineString":return!y(e,o,t);case"Polygon":return!P(o,e,t)}}return!1}function g(e,o){for(let t=0;t<e.coordinates.length-1;t++)if(m(e.coordinates[t],e.coordinates[t+1],o.coordinates))return!0;return!1}function d(e,o,t){return a(e,o,{ignoreSelfIntersections:t}).features.length>0}function y(e,o,t){for(const n of o.coordinates)if(i(n,e))return!0;return a(o,f(e),{ignoreSelfIntersections:t}).features.length>0}function P(e,o,t){for(const n of e.coordinates[0])if(i(n,o))return!0;for(const n of o.coordinates[0])if(i(n,e))return!0;return a(f(e),f(o),{ignoreSelfIntersections:t}).features.length>0}function m(e,o,t){const n=t[0]-e[0],s=t[1]-e[1],r=o[0]-e[0],c=o[1]-e[1];return n*c-s*r!==0?!1:Math.abs(r)>=Math.abs(c)?r>0?e[0]<=t[0]&&t[0]<=o[0]:o[0]<=t[0]&&t[0]<=e[0]:c>0?e[1]<=t[1]&&t[1]<=o[1]:o[1]<=t[1]&&t[1]<=e[1]}function p(e,o){return e[0]===o[0]&&e[1]===o[1]}var S=l;export{l as booleanDisjoint,S as default};
