import{distanceWeight as P}from"../distance-weight@7.2.0/index.js";import{featureEach as S}from"../meta@7.2.0/index.js";function g(o,t){var e,h;const z=t.inputField,I=t.threshold||1e5,b=t.p||2,v=(e=t.binary)!=null?e:!1,y=t.alpha||-1,N=(h=t.standardization)!=null?h:!0,l=P(o,{alpha:y,binary:v,p:b,standardization:N,threshold:I}),i=[];S(o,n=>{const c=n.properties||{};i.push(c[z])});const f=w(i),E=_(i);let u=0,s=0,d=0,m=0;const a=l.length;for(let n=0;n<a;n++){let c=0;for(let r=0;r<a;r++)u+=l[n][r]*(i[n]-f)*(i[r]-f),s+=l[n][r],d+=Math.pow(l[n][r]+l[r][n],2),c+=l[n][r]+l[r][n];m+=Math.pow(c,2)}d=.5*d;const x=u/s/E,p=-1/(a-1),F=a*a*d-a*m+3*(s*s),W=(a-1)*(a+1)*(s*s),j=F/W-p*p,M=Math.sqrt(j),q=(x-p)/M;return{expectedMoranIndex:p,moranIndex:x,stdNorm:M,zNorm:q}}function w(o){let t=0;for(const e of o)t+=e;return t/o.length}function _(o){const t=w(o);let e=0;for(const h of o)e+=Math.pow(h-t,2);return e/o.length}var k=g;export{k as default,g as moranIndex};
