import{area as D}from"../area@7.1.0/index.js";import{bbox as q}from"../bbox@7.1.0/index.js";import{bboxPolygon as A}from"../bbox-polygon@7.1.0/index.js";import{getCoord as B}from"../invariant@7.1.0/index.js";import{squareGrid as C}from"../square-grid@7.1.0/index.js";function M(r,o){o=o||{};const c=o.studyBbox||q(r),s=o.confidenceLevel||20,b=r.features,O=b.length,j=D(A(c)),v=Math.sqrt(j/O*2),m=C(c,v,{units:"meters"}).features,n={};for(let t=0;t<m.length;t++)n[t]={box:q(m[t]),cnt:0};let h=0;for(const t of b)for(const e of Object.keys(n)){const u=n[e].box;if(R(B(t),u)){n[e].cnt+=1,h+=1;break}}let f=0;for(const t of Object.keys(n)){const e=n[t].cnt;e>f&&(f=e)}const p=[],i=Object.keys(n).length,d=h/i;let x=0;for(let t=0;t<f+1;t++)x+=Math.exp(-d)*Math.pow(d,t)/w(t),p.push(x);const l=[];let y=0;for(let t=0;t<f+1;t++){for(const u of Object.keys(n))n[u].cnt===t&&(y+=1);const e=y/i;l.push(e)}let a=0;for(let t=0;t<f+1;t++){const e=Math.abs(p[t]-l[t]);e>a&&(a=e)}const g=L[s]/Math.sqrt(i),k={criticalValue:g,isRandom:!0,maxAbsoluteDifference:a,observedDistribution:l};return a>g&&(k.isRandom=!1),k}var L={20:1.07275,15:1.13795,10:1.22385,5:1.3581,2:1.51743,1:1.62762};function R(r,o){return o[0]<=r[0]&&o[1]<=r[1]&&o[2]>=r[0]&&o[3]>=r[1]}function w(r){const o=[];function c(s){return s===0||s===1?1:o[s]>0?o[s]:o[s]=c(s-1)*s}return c(r)}var G=M;export{G as default,M as quadratAnalysis};
